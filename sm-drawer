#!/usr/bin/env tclsh

package require TclOO
package require Tk

# TODO
#
# - bug in load/save/delete
#
# - initial + final state
#
# - hierarchical states
#
# - class name
# - mark parallel states
#
# - testing (esp notifier to start with)



# notifier class ala QObject signals/slots
oo::class create notifier {
    variable Listeners
    constructor {} {
        set Listeners [dict create]
    }
    destructor {
        my emit destroyed
    }
    method connect {name dst args} {
        if {[dict exists $Listeners $name]} {
            set idx [lsearch -exact [dict get $Listeners $name] [list $dst {*}$args]]
            if {$idx != -1} {
                # already present, break loop.  when a connection is
                # made a second connection is made to make sure that
                # we disconnect the signal if the destination object
                # is destroyed.
                return false
            }
        }
        dict lappend Listeners $name [list $dst {*}$args]
        # monitor destroyed signal from dst, so we can disconnect it
        # when it is destroyed and don't call methods on non-existent
        # objects.
        $dst connect destroyed [self object] disconnect_obj $dst
        return true
    }
    method disconnect {name dst args} {
        if {[dict exists $Listeners $name]} {
            set entries [dict get $Listeners $name]
            set idx [lsearch -exact $entries [list $dst {*}$args]]
            if {$idx != -1} {
                dict set Listeners $name [lreplace $entries $idx $idx]
                return true
            }
        }
        return false
    }
    # this loops through all connections and disconnects just one
    # object
    method disconnect_obj {dst} {
        dict for {k v} $Listeners {
            set entries [dict get $Listeners $k]
            set indices {}
            for {set i 0} {$i<[llength $entries]} {incr i} {
                if {[lindex [lindex $entries $i] 0] == $dst} {
                    lappend indices $i
                }
            }
            foreach index $indices {
                set entries [lreplace $entries $index $index]
            }
            dict set Listeners $k $entries
        }
    }
    method emit {name args} {
        if {[dict exists $Listeners $name]} {
            foreach listener [dict get $Listeners $name] {
                {*}$listener {*}$args
            }
        }
    }
}

# some tests for notifier
# TODO



# wrap canvas object
oo::class create my_app {
    superclass notifier
    variable Canvas StateIdx Selected Transitions States CurState
    constructor {c} {
        next
        set Canvas $c
        set StateIdx 0
        set Selected {}
        set CurState idle
        set Transitions {}
        set States {}

        canvas $c -background white
        button .save -text {Save} -command [list [self object] save]
        button .load -text {Load} -command [list [self object] load]
        button .quit -text {Quit} -command exit
        label .status_bar -text {Idle}
        button .add_state -text {Add State} -command [list [self object] switch_to_add_state_mode]
        button .add_trans -text {Add Transition} -command [list [self object] switch_to_add_transition_mode]

        pack .add_state .add_trans -side top
        pack $Canvas -expand true -fill both
        pack .quit .status_bar .load .save -side bottom
    }
    destructor {
        # teardown all notifications  before destroying the canvas
        next
        destroy $Canvas
    }
    method set_status_bar {text} {
        .status_bar configure -text $text
    }
    method save {} {
        set f [open {saved_data.ini} {w}]
        # first save the states
        foreach state $States {
            $state serialise $f
        }
        puts $f "\[Transitions\]"
        foreach transition $Transitions {
            $transition serialise $f
        }
        close $f
    }
    method load {} {
        if {$CurState != {idle}} {
            return
        }
        while {[llength $States] > 0} {
            [lindex $States end] destroy
        }
        # destroying all states destroys all transitions too

        set f [open {saved_data.ini} {r}]
        set got_transitions false
        set name {}
        set x {}
        set y {}
        while {[gets $f line] >= 0} {
            switch -regexp -matchvar value -- $line {
                {\[Transitions\]} {
                    # flush existing state if any
                    if {$name != {} && $x != {} && $y != {}} {
                        set new_state [state new $Canvas [self object] $x $y $name]
                        lappend States $new_state
                        $new_state connect destroyed [self object] state_destroyed $new_state
                    }
                    break
                }
                {\[State\]} {
                    # flush existing state if any
                    if {$name != {} && $x != {} && $y != {}} {
                        set new_state [state new $Canvas [self object] $x $y $name]
                        lappend States $new_state
                        $new_state connect destroyed [self object] state_destroyed $new_state
                        set name {}
                        set x {}
                        set y {}
                    }
                }
                {name=(.*)}  {
                    set name [lindex $value 1]
                }
                {x=(.*)} {
                    set x [lindex $value 1]
                }
                {y=(.*)} {
                    set y [lindex $value 1]
                }
                default {
                    puts "Error parsing state: $line"
                }
            }
        }

        # Now read the transitions
        while {[gets $f line] >= 0} {
            if {[regexp {(.*)=(.*)} $line line src_name dst_name]} {
                # lookup src_name & dst_name
                set src [my get_state $src_name]
                set dst [my get_state $dst_name]

                set new_transition [transition new $Canvas $src $dst]
                lappend Transitions $new_transition
                $new_transition connect destroyed [self object] transition_destroyed $new_transition
            } else {
                puts "Error parsing transition: $line"
            }
        }
        close $f
    }
    method get_state {name} {
        foreach state $States {
            if {$name == [$state get_name]} {
                return $state
            }
        }
        throw STATE_NOT_FOUND "No state called $name found!"
    }
    method switch_to_add_state_mode {} {
        if {$CurState != {idle}} {
            return
        }
        set CurState addState
        bind $Canvas <Button-1> "[self object] add_state %x %y"
        $Canvas configure -cursor crosshair
        my set_status_bar {Click to add new state...}
    }
    method add_state {x y} {
        if {$CurState != {addState}} {
            return
        }
        set CurState idle
        bind $Canvas <Button-1> {}
        $Canvas configure -cursor left_ptr
        my set_status_bar {Idle}
        # loop until there is no state with this name; this is
        # required in case we save a state graph and then load it
        # again.  Alternative would be save the StateIdx in the saved
        # data, but we don't want to leak implementation details like
        # that.
        try {
            while {true} {
                incr StateIdx
                my get_state "state$StateIdx"
            }
        } trap {STATE_NOT_FOUND} {} {}
        set new_state [state new $Canvas [self object] $x $y "state$StateIdx"]
        lappend States $new_state
        $new_state connect destroyed [self object] state_destroyed $new_state
    }
    method state_destroyed {state} {
        set idx [lsearch -exact $States $state]
        set States [lreplace $States $idx $idx]
    }
    method switch_to_add_transition_mode {} {
        if {$CurState != {idle}} {
            return
        }
        my set_status_bar {Select the first state...}
        set CurState addTransition
    }
    method select {obj} {
        if {$CurState != {addTransition}} {
            return false
        }
        if {$Selected == {}} {
            set Selected $obj
            my set_status_bar {Select the second state...}
            return true
        } else {
            set new_transition [transition new $Canvas $Selected $obj]
            lappend Transitions $new_transition
            $new_transition connect destroyed [self object] transition_destroyed $new_transition
            # deselect other state
            $Selected deselect
            set Selected {}
            set CurState idle
            my set_status_bar {Idle}
            return false
        }
    }
    method deselect {obj} {
        if {$Selected != {}} {
            my set_status_bar {Idle}
            set Selected {}
        }
    }
    method transition_destroyed {transition} {
        set idx [lsearch -exact $Transitions $transition]
        set Transitions [lreplace $Transitions $idx $idx]
    }
    method popup_destroy_state {obj} {
        set answer [tk_messageBox -message "Delete [$obj get_name]?" \
                        -icon question -type yesno]
        switch -- $answer {
            yes {$obj destroy}
        }
    }
    method popup_rename_state {obj} {
        set new_name [.popup.e get]
        foreach state $States {
            if {$obj != $state && $new_name == [$state get_name]} {
                tk_messageBox -message "There is already a state called [$obj get_name]!" \
                        -icon error -type ok
                return
            }
        }
        $obj rename $new_name
    }
    method popup_menu {obj x y} {
        if {[winfo exists .popup]} {
            destroy .popup
        }
        tk::toplevel .popup
        wm transient .popup .
        wm overrideredirect .popup true
        wm attributes .popup -type popup_menu
        set parent_geo [winfo geometry .]
        regexp {[0-9]+x[0-9]+\+([0-9]+)\+([0-9]+)} $parent_geo parent_geo parent_x parent_y
        wm geometry .popup "+[expr {$x + $parent_x}]+[expr {$y + $parent_y}]"
        label .popup.l -text "Menu: [$obj get_name]"
        entry .popup.e
        .popup.e insert 0 [$obj get_name]
        button .popup.r -text {Rename} -command [list [self object] popup_rename_state $obj]
        button .popup.d -text {Delete} -command [list [self object] popup_destroy_state $obj]
        button .popup.c -text {Close} -command [list destroy .popup]
        pack .popup.l .popup.e .popup.r .popup.d .popup.c
    }
}



oo::class create state {
    superclass notifier
    variable Canvas App Name Selected Tid Rid PointerOffset
    constructor {c a x y name} {
        next
        set Canvas $c
        set App $a
        set Name $name
        set Selected false
        set PointerOffset [list 0 0]
        set Tid [$Canvas create text $x $y -text $name -fill black -activefill red]
        set Rid [$Canvas create rectangle [$Canvas bbox $Tid] -fill lightgrey]
        $Canvas lower $Rid $Tid
        $Canvas bind $Tid <ButtonPress-1> "[self object] save_pointer_offset %x %y"
        $Canvas bind $Rid <ButtonPress-1> "[self object] save_pointer_offset %x %y"
        $Canvas bind $Tid <B1-Motion> "[self object] move %x %y"
        $Canvas bind $Rid <B1-Motion> "[self object] move %x %y"
        $Canvas bind $Tid <3> "$App popup_menu [self object] %x %y"
        $Canvas bind $Rid <3> "$App popup_menu [self object] %x %y"
    }
    destructor {
        $Canvas delete $Tid
        $Canvas delete $Rid
        next
    }
    # On ButtonPress save the location of the pointer so we have a
    # basis for moving the state without it jumping all over the
    # place.
    method save_pointer_offset {x y} {
        lassign [my get_entry_coords] nw_x nw_y
        set PointerOffset [list [expr {$x - $nw_x}] [expr {$y - $nw_y}]]
        # call next action
        my select
    }
    method get_entry_coords {} {
        return [lrange [$Canvas bbox $Tid] 0 1]
    }
    method get_exit_coords {} {
        return [lrange [$Canvas bbox $Tid] 2 3]
    }
    method serialise {f} {
        puts $f "\[State\]"
        puts $f "name=[my get_name]"
        lassign [my get_coords] x y
        puts $f "x=$x"
        puts $f "y=$y"
    }
    method get_name {} {
        return $Name
    }
    method move {new_x new_y} {
        lassign $PointerOffset offset_x offset_y
        set x [expr {$new_x - $offset_x}]
        set y [expr {$new_y - $offset_y}]
        $Canvas moveto $Tid $x $y
        $Canvas moveto $Rid $x $y
        my emit redrawn
    }
    method get_coords {} {
        $Canvas coords $Tid
    }
    method rename {new_name} {
        set Name $new_name
        $Canvas dchars $Tid 0 end
        $Canvas insert $Tid end $Name
        $Canvas delete $Rid
        # repaint canvas
        set Rid [$Canvas create rectangle [$Canvas bbox $Tid] -fill lightgrey]
        $Canvas lower $Rid $Tid
        my emit redrawn
    }
    method select {} {
        if {[$App select [self object]]} {
            # select is ok now
            set Selected true
            $Canvas itemconfigure $Tid -fill blue -activefill red
        }
    }
    method deselect {} {
        set Selected false
        $Canvas itemconfigure $Tid -fill black -activefill red
        $App deselect [self object]
    }
}



oo::class create transition {
    superclass notifier
    variable Canvas Src Dst Lid Cid
    constructor {canvas src dst} {
        next
        set Canvas $canvas
        set Src $src
        set Dst $dst
        set Lid {}
        set Cid {}
        my CreateLine
        $Src connect destroyed [self object] state_destroyed
        $Dst connect destroyed [self object] state_destroyed
        $Src connect redrawn [self object] redraw
        $Dst connect redrawn [self object] redraw
    }
    destructor {
        $Canvas delete $Lid
        next
    }
    method serialise {f} {
        puts $f "[$Src get_name]=[$Dst get_name]"
    }
    method CreateLine {} {
        if {$Lid != {}} {
            $Canvas delete $Lid
            $Canvas delete $Cid
        }
        set Lid [$Canvas create line [my GetLineCoords] -arrow last]
        $Canvas lower $Lid
        set Cid [$Canvas create oval [my GetCircleCoords] -fill black -activefill red]
        $Canvas raise $Cid $Lid
    }
    method GetLineCoords {} {
        return [list {*}[$Src get_exit_coords] {*}[$Dst get_entry_coords]]
    }
    method GetCircleCoords {} {
        lassign [my GetLineCoords] lsx lsy lex ley
        set mx [expr {$lsx + ($lex - $lsx) / 2}]
        set my [expr {$lsy + ($ley - $lsy) / 2}]
        set r 5
        return [list [expr {$mx - $r}] [expr {$my - $r}] [expr {$mx + $r}] [expr {$my + $r}]]
    }
    method redraw {args} {
        # TODO howto move line instead of replacing it?
        my CreateLine
    }
    method state_destroyed {} {
        my destroy
    }
}


#### Setup canvas + widgets

my_app new .c
