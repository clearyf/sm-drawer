#!/usr/bin/env tclsh

package require TclOO
package require Tk

# Note that all unit tests are run when the program starts.

# TODO high priority
#
# - initial transition has no event
# - change initial/final state entry/exit
# - group UI buttons (WIP)
# - fix arrows always enter state horizontally
# - move transition descriptions out of the way of the lines
# - conditions on events
# - panning (maybe separate tool button?)
#     bind .c <ButtonPress-1> {%W scan mark   %x %y}
#     bind .c <B1-Motion>     {%W scan dragto %x %y 1}
# - ?
#
# TODO next major feature
#
# - hierarchical states
#
# TODO nice to have
#
# - menubar (file edit help)
# - toolbar
# - support multiple points on transitions
# - class name (probably not required)
# - mark parallel states



# some tracing/logging infrastructure
proc enter {mesg} {
    # puts "ENTER: $mesg"
}

proc leave {mesg} {
    # puts "LEAVE: $mesg"
}



# notifier class ala QObject signals/slots
oo::class create notifier {
    variable Listeners DestroyPending
    constructor {} {
        enter "[self object] new"
        set Listeners [dict create]
        set DestroyPending {}
        leave "[self object] new"
    }
    destructor {
        enter "[self object] destroy"
        if {[my get_destroy_pending]} {
            # this could be the sign of a mistake, as if an object is
            # pending deletion then direct destroy is not a good sign.
            puts "WARN: [self object] is being destroyed directly while pending destroy is active"
            after cancel $DestroyPending
        }
        my emit destroyed
        leave "[self object] destroy"
    }
    # gotcha here with notifications is if the "destroyed" signal is
    # used to destroy another object eg:
    #
    # $obj1 connect destroyed $obj2 destroy
    #
    # then the list of objects is invalidated during iteration!
    # Solution is if an object should be destroyed when another one is
    # destroyed then the method called to destroy the object is this
    # one here "destroy_later" which will schedule destruction later
    # when the event loop is idle.
    #
    # Alternatives are tricky if automatic disconnection on object
    # destruction is wanted.  Basically if a signal triggers a destroy
    # then ALL disconnections must be completed before the object is
    # destroyed, and is greatly complicated by the fact that the
    # Listeners may be modified while it is being iterated through,
    # but the foreach iterating over the list will not be modified.
    # By far the most straightforward solution is to schedule each
    # item for deletion one at a time in the event loop.
    method destroy_later {} {
        # Make sure to only call destroy once on this object.
        if {$DestroyPending == {}} {
            set DestroyPending [after idle [self object] destroy]
        }
    }
    method get_destroy_pending {} {
        if {$DestroyPending != {}} {
            try {
                # throws error if callback already execut(ed|ing)
                after info $DestroyPending
                return true
            } on {error} {} {
                return false
            }
        }
        return false
    }
    method get_connections {} {
        return $Listeners
    }
    method connect {name dst args} {
        enter "[self object] connect $name $dst $args"
        if {$name == {destroyed} && $args == {destroy}} {
            error "Cannot connect destroyed to destroy, use destroy_later!"
        }
        if {[dict exists $Listeners $name]} {
            set idx [lsearch -exact [dict get $Listeners $name] [list $dst {*}$args]]
            if {$idx != -1} {
                # already present, break loop.  when a connection is
                # made a second connection is made to make sure that
                # we disconnect the signal if the destination object
                # is destroyed.
                leave "[self object] connect $name $dst $args -> false"
                return false
            }
        }
        dict lappend Listeners $name [list $dst {*}$args]
        if {[self object] != $dst} {
            # monitor destroyed signal from dst, so we can disconnect
            # it when it is destroyed and don't call methods on
            # non-existent objects.
            $dst connect destroyed [self object] disconnect_obj $dst
        }
        leave "[self object] connect $name $dst $args -> true"
        return true
    }
    method disconnect {name dst args} {
        enter "[self object] disconnect $name $dst $args"
        if {[dict exists $Listeners $name]} {
            set entries [dict get $Listeners $name]
            set idx [lsearch -exact $entries [list $dst {*}$args]]
            if {$idx != -1} {
                dict set Listeners $name [lreplace $entries $idx $idx]
                leave "[self object] disconnect $name $dst $args -> true"
                return true
            }
        }
        leave "[self object] disconnect $name $dst $args -> false"
        return false
    }
    # this loops through all connections and disconnects just one
    # object
    method disconnect_obj {dst} {
        enter "[self object] disconnect_obj $dst -> $Listeners"
        dict for {k v} $Listeners {
            set entries [dict get $Listeners $k]
            set indices {}
            for {set i 0} {$i<[llength $entries]} {incr i} {
                if {[lindex [lindex $entries $i] 0] == $dst} {
                    lappend indices $i
                }
            }
            # remove element in reverse order as otherwise the later
            # indices become invalid
            foreach index [lreverse $indices] {
                set entries [lreplace $entries $index $index]
            }
            dict set Listeners $k $entries
        }
        leave "[self object] disconnect_obj $dst -> $Listeners"
    }
    method emit {name args} {
        enter "[self object] emit $name $args"
        if {[dict exists $Listeners $name]} {
            foreach listener [dict get $Listeners $name] {
                {*}$listener {*}$args
            }
        }
        leave "[self object] emit $name $args"
    }
}



# test class to test various bits of notifier functionality
oo::class create test_notifier {
    superclass notifier
    variable Heard
    constructor {} {
        set Heard false
        next
    }
    destructor {
        next
    }
    method beep {} {
        my emit beep
    }
    method listen_to {obj} {
    }
    method somebody_beeped {} {
        set Heard true
    }
    method heard_beep {} {
        return $Heard
    }
}

proc test_assert_true {body text} {
    if {![uplevel 1 $body]} {
        error "Expected: $text"
    }
}

proc test_assert_false {body text} {
    if {[uplevel 1 $body]} {
        error "Expected: $text"
    }
}

# test is fairly straightforward, first create the two instances
set foo [test_notifier new]
set bar [test_notifier new]
$bar beep
# nothing should have been heard yet from bar by foo
test_assert_false {$foo heard_beep} "Beep not heard"

# foo should monitor the beep from foo
$bar connect beep $foo somebody_beeped
# this time it should be heard
$bar beep
test_assert_true {$foo heard_beep} "Beep was heard"

# test that this gives us an error
test_assert_true {catch {$foo connect destroyed $bar destroy}} "connect destroyed -> destroy is an error!"

# test add destroy_later for tearing down networks of notifiers
$foo connect destroyed $bar destroy_later
test_assert_false {$bar get_destroy_pending} "deletion of object is not pending"

$foo destroy
# bar should only get destroyed when the event loop is entered
test_assert_true {info object isa object $bar} "object is still alive"
test_assert_true {$bar get_destroy_pending} "deletion of object is pending"

# enter event loop to process waiting destroy_later event
update
# bar should now be destroyed
test_assert_false {info object isa object $bar} "object is destroyed"
# end of test cases



### handy functions

proc calc_circle_bbox {x y r} {
    return [list [expr {$x - $r}] [expr {$y - $r}] [expr {$x + $r}] [expr {$y + $r}]]
}

proc calc_centre_coords {bbox} {
    lassign $bbox bx1 by1 bx2 by2
    return [list [expr {$bx1 + ($bx2 - $bx1) / 2}] \
                [expr {$by1 + ($by2 - $by1) / 2}]]
}

proc create_popup {} {
    lassign [winfo pointerxy .] x y
    if {[winfo exists .popup]} {
        # subsequent popups should appear at the same spot as the
        # first one.
        set x [winfo x .popup]
        set y [winfo y .popup]
        destroy .popup
    }
    tk::toplevel .popup
    wm transient .popup .
    wm overrideredirect .popup true
    wm attributes .popup -type popup_menu
    wm geometry .popup "+$x+$y"
}

proc create_popup_menu {name buttons} {
    create_popup
    label .popup.l -text "Menu: $name"
    pack .popup.l -fill x
    set i 0
    foreach b $buttons {
        set t [lindex $b 0]
        set c [lrange $b 1 end]
        button ".popup.n_$i" -text $t -command {*}$c
        pack ".popup.n_$i" -fill x
        incr i
    }
    button .popup.c -text {Close} -command "destroy .popup"
    pack .popup.c -fill x
}

proc create_rename_popup {name args} {
    create_popup
    label .popup.l -text "Rename $name"
    entry .popup.e
    .popup.e insert 0 $name
    button .popup.o -text {Ok} \
        -command "continue_rename_popup $args"
    button .popup.c -text {Cancel} -command "destroy .popup"
    pack .popup.l .popup.e .popup.o .popup.c -fill x
    puts "rename popup created"
}

proc continue_rename_popup {args} {
    {*}$args [.popup.e get]
    destroy .popup
}



oo::class create my_app {
    superclass notifier
    variable Canvas StateIdx Selected Transitions States CurState
    constructor {c} {
        next
        set Canvas $c
        set StateIdx 0
        set Selected {}
        set CurState idle
        set Transitions {}
        set States {}

        canvas $c -background white -xscrollcommand {.scroll_b set} \
            -yscrollcommand {.scroll_l set} -scrollregion {0 0 800 800}
        frame .top
        frame .bot
        button .top.save -text {Save} -command [list [self object] save [my GetFile]]
        button .top.load -text {Load} -command [list [self object] load [my GetFile]]
        button .top.quit -text {Quit} -command exit
        label .bot.status_bar -text {Idle}
        button .top.add_istate -text {Add Initial State} \
            -command [list [self object] switch_to_add_state_mode initial]
        button .top.add_state -text {Add State} \
            -command [list [self object] switch_to_add_state_mode normal]
        button .top.add_trans -text {Add Transition} \
            -command [list [self object] switch_to_add_transition_mode]
        scrollbar .scroll_l -command {.c yview}
        scrollbar .scroll_b -command {.c xview} -orient horizontal

        pack .bot -side bottom
        pack .top -side top
        pack .top.add_state .top.add_istate .top.add_trans -side left
        pack .scroll_l -side right -fill y
        pack $Canvas -expand true -fill both
        pack .scroll_b -fill x
        pack .bot.status_bar -fill x -side top
        pack .top.load .top.save -side left
        pack .top.quit -side right

        bind . <Escape> "[self object] cancel_current_op"
    }
    destructor {
        # teardown all notifications before destroying the canvas
        next
        # ensure all destroy_later are finished before destroying the
        # canvas
        update idletasks
        destroy $Canvas
    }
    method set_status_bar {text} {
        .bot.status_bar configure -text $text
    }
    method cancel_current_op {} {
        $Canvas configure -cursor left_ptr
        my set_status_bar {Idle}
        set CurState idle
        if {$Selected != {}} {
            $Selected deselect
            set Selected {}
        }
    }
    method SaveAllToChannel {chan} {
        foreach state $States {
            $state serialise $chan
        }
        foreach transition $Transitions {
            $transition serialise $chan
        }
    }
    method save {filename} {
        try {
            set f [open $filename {w}]
            my SaveAllToChannel $f
        } finally {
            close $f
        }
    }
    method CreateObject {mode d} {
        switch -- $mode {
            State {
                if {[dict exists $d name]
                    && [dict exists $d position]} {
                    set new_state [state new $Canvas [self object] \
                                       {*}[dict get $d position] [dict get $d name]]
                    lappend States $new_state
                    $new_state connect destroyed [self object] \
                        state_destroyed $new_state
                } else {
                    puts "Don't have enough information to construct a state: $d"
                }
            }
            Transition {
                if {[dict exists $d from]
                    && [dict exists $d to]
                    && [dict exists $d points]
                    && [dict exists $d event]} {

                    set src [my get_state [dict get $d from]]
                    set dst [my get_state [dict get $d to]]

                    set new_transition [transition new $Canvas [self object] \
                                            $src $dst [dict get $d event] \
                                            [dict get $d points]]
                    lappend Transitions $new_transition
                    $new_transition connect destroyed [self object] \
                        transition_destroyed $new_transition
                } else {
                    puts "Don't have enough information to construct a transition: $d"
                }
            }
            {Initial State} {
                if {[dict exists $d position]} {
                    set new_state [initial_state new $Canvas [self object] \
                                       {*}[dict get $d position]]
                    lappend States $new_state
                    $new_state connect destroyed [self object] \
                        state_destroyed $new_state
                }
            }
            default {
                puts "Don't know what to do with a $mode with $d"
            }
        }
    }
    method load {filename} {
        if {$CurState != {idle}} {
            return
        }
        foreach state $States {
            $state destroy_later
        }
        # destroying all states destroys all transitions too.  have to
        # enter event loop to process them though.
        update idletasks
        if {[llength $States] != 0 || [llength $Transitions] != 0} {
            error "Not all states & transitions were destroyed!"
        }

        try {
            set f [open $filename r]
            set d [dict create]
            set mode {}
            while {[gets $f line] >= 0} {
                switch -regexp -matchvar value -- $line {
                    {\[(.*)\]} {
                        if {$mode != {}} {
                            my CreateObject $mode $d
                        }
                        set mode [lindex $value 1]
                        set d [dict create]
                    }
                    {([^=]+)=(.+)}  {
                        dict set d [lindex $value 1] [lindex $value 2]
                    }
                    default {
                        puts "Error parsing state: $line"
                    }
                }
            }
            # eof, create very last object
            if {$mode != {}} {
                my CreateObject $mode $d
            }
        } finally {
            close $f
        }
        # TODO fix this sanity test: create tmp saved file and compare
        # to file just loaded.
        #
        # try {
        #     my save tmpfile.ini
        #     set l [exec md5sum tmpfile.ini $filename | cut -c -32]
        #     if {[lindex $l 0] != [lindex $l 1]} {
        #         tk_messageBox -message "Problem detected with save-load functionality!" \
        #             -icon error -type ok
        #     }
        # } finally {
        #     exec rm -f tmpfile.ini
        # }
    }
    method get_bbox {} {
        return [$Canvas cget -scrollregion]
    }
    method get_state {name} {
        foreach state $States {
            if {$name == [$state get_name]} {
                return $state
            }
        }
        throw STATE_NOT_FOUND "No state called $name found!"
    }
    method switch_to_add_state_mode {type} {
        if {$CurState != {idle}} {
            return
        }
        switch -- $type {
            initial {
                set CurState addInitialState
            }
            normal {
                set CurState addNormalState
            }
            default {
                error "Unknown state type: $type"
            }
        }
        bind $Canvas <Button-1> "[self object] add_state %x %y"
        $Canvas configure -cursor crosshair
        my set_status_bar {Click to add new state...}
    }
    method add_state {x y} {
        switch -- $CurState {
            addInitialState {
                set new_state [initial_state new $Canvas [self object] $x $y]
            }
            addNormalState {
                # loop until there is no state with this name; this is
                # required in case we save a state graph and then load it
                # again.  Alternative would be save the StateIdx in the saved
                # data, but we don't want to leak implementation details like
                # that.
                try {
                    while {true} {
                        incr StateIdx
                        my get_state "state$StateIdx"
                    }
                } trap {STATE_NOT_FOUND} {} {}
                set new_state [state new $Canvas [self object] $x $y "state$StateIdx"]
            }
            default {
                return
            }
        }
        bind $Canvas <Button-1> {}
        $Canvas configure -cursor left_ptr
        my set_status_bar {Idle}
        lappend States $new_state
        $new_state connect destroyed [self object] state_destroyed $new_state
        set CurState idle
    }
    method state_destroyed {state} {
        set idx [lsearch -exact $States $state]
        set States [lreplace $States $idx $idx]
    }
    method switch_to_add_transition_mode {} {
        if {$CurState != {idle}} {
            return
        }
        my set_status_bar {Select the first state...}
        $Canvas configure -cursor crosshair
        set CurState addTransition
    }
    method select {obj} {
        if {$CurState != {addTransition}} {
            return false
        }
        set methods [info object methods $obj -all]
        if {$Selected == {}} {
            if {[lsearch -exact $methods get_exit_coords] == -1} {
                # can't use that state as a source
                return false
            }
            set Selected $obj
            my set_status_bar {Select the second state...}
            return true
        } else {
            if {[lsearch -exact $methods get_entry_coords] == -1} {
                # can't use that state as a destination
                return false
            }
            set new_transition [transition new $Canvas [self object] \
                                    $Selected $obj "foobar"]
            lappend Transitions $new_transition
            $new_transition connect destroyed [self object] \
                transition_destroyed $new_transition
            $Selected deselect
            $Canvas configure -cursor left_ptr
            set Selected {}
            set CurState idle
            my set_status_bar {Idle}
            return false
        }
    }
    method deselect {obj} {
        if {$Selected != {}} {
            my set_status_bar {Idle}
            set Selected {}
        }
    }
    method transition_destroyed {transition} {
        set idx [lsearch -exact $Transitions $transition]
        set Transitions [lreplace $Transitions $idx $idx]
    }
    method popup_destroy {obj} {
        set answer [tk_messageBox -message "Delete [$obj get_name]?" \
                        -icon question -type yesno]
        switch -- $answer {
            yes {$obj destroy_later}
        }
    }
    method popup_rename_state {obj new_name} {
        foreach state $States {
            if {$obj != $state && $new_name == [$state get_name]} {
                tk_messageBox -message "There is already a state called $new_name!" \
                        -icon error -type ok
                return
            }
        }
        $obj rename $new_name
    }
    method GetFile {} {
        return saved_data.ini
    }
}



# A basic element on the canvas, handles movement, selection, context
# menu.  Does not draw anything on its own
oo::class create basic_element {
    superclass notifier
    variable Canvas Parent Id PointerOffset Selected
    constructor {c p args} {
        next
        set Canvas $c
        set Parent $p
        set PointerOffset {0 0}
        $Parent connect destroyed [self object] destroy_later
        set Selected false
        my add_elements $args
    }
    destructor {
        $Canvas delete [self object]
        next
    }
    method get_canvas {} {
        return $Canvas
    }
    method get_parent {} {
        return $Parent
    }
    method add_elements {args} {
        foreach id $args {
            $Canvas addtag [self object] withtag $id
            $Canvas bind [self object] <ButtonPress-1> \
                "[self object] handle_button1_press %x %y"
            $Canvas bind [self object] <B1-Motion> "[self object] move %x %y"
            $Canvas bind [self object] <3> \
                "[self object] emit popup_menu"
        }
        my Check_parent_bbox
    }
    method Check_parent_bbox {} {
        # move inside parent bbox
        lassign [$Canvas bbox [self object]] x1 y1 x2 y2
        if {$x1 == {}} {
            # don't have any elements yet
            return
        }
        lassign [$Parent get_bbox] px1 py1 px2 py2

        # sanity check, check parent that is bigger than object!
        set w [expr {$x2 - $x1}]
        set h [expr {$y2 - $y1}]
        if {!($w < ($px2 - $px1) || $h < ($py2 - $py1))} {
            throw BBOX_TOO_SMALL \
                "$w,$h doesn't fit inside ($px1,$py1,$px2,$py2)"
        }

        # calculate any adjustments required
        set adj_x 0
        set adj_y 0
        if {$x1 < $px1} {
            set adj_x [expr {$px1 - $x1}]
        } elseif {$x2 > $px2} {
            set adj_x [expr {$px2 - $x2}]
        }
        if {$y1 < $py1} {
            set adj_y [expr {$py1 - $y1}]
        } elseif {$y2 > $py2} {
            set adj_y [expr {$py2 - $y2}]
        }
        $Canvas move [self object] $adj_x $adj_y
        my emit redrawn [self object]
    }
    method handle_button1_press {x y} {
        my Save_pointer_offset $x $y
        my select
    }
    # On ButtonPress save the location of the pointer so we have a
    # basis for moving the state without it jumping all over the
    # place.
    method Save_pointer_offset {x y} {
        lassign [$Canvas bbox [self object]] nw_x nw_y
        set PointerOffset [list [expr {$x - $nw_x}] [expr {$y - $nw_y}]]
    }
    method move {raw_x raw_y} {
        lassign $PointerOffset offset_x offset_y
        set new_x [expr {$raw_x - $offset_x}]
        set new_y [expr {$raw_y - $offset_y}]
        lassign [$Canvas bbox [self object]] old_x old_y
        set rel_x [expr {$new_x - $old_x}]
        set rel_y [expr {$new_y - $old_y}]
        $Canvas move [self object] $rel_x $rel_y
        my Check_parent_bbox
    }
    method get_bbox {} {
        return [$Canvas bbox [self object]]
    }
    method get_coords {} {
        return [calc_centre_coords [my get_bbox]]
    }
    method select {} {
        if {!$Selected && [$Parent select [self object]]} {
            set Selected true
            my emit selected [self object]
        }
    }
    method deselect {} {
        if {$Selected} {
            set Selected false
            my emit deselected [self object]
        }
    }
}



oo::class create state {
    superclass basic_element
    variable Name Tid Rid
    constructor {c a x y name} {
        set Name $name
        next $c $a
        set Tid [$c create text $x $y -text $name -fill black -activefill red]
        set Rid [$c create rectangle [my get_box_coords] -fill lightgrey]
        my add_elements $Tid $Rid
        $c lower $Rid $Tid
        [self object] connect selected [self object] on_selected
        [self object] connect deselected [self object] on_deselected
        [self object] connect popup_menu [self object] on_popup_menu
    }
    destructor {
        next
    }
    method get_box_coords {} {
        lassign [[my get_canvas] bbox $Tid] x1 y1 x2 y2
        set o 5
        return [list [expr {$x1 - $o}] [expr {$y1 - $o}] [expr {$x2 + $o}] [expr {$y2 + $o}]]
    }
    method get_entry_coords {} {
        lassign [my get_box_coords] x1 y1 x2 y2
        return [list $x1 [expr {$y1 + ($y2 - $y1) / 2}]]
    }
    method get_exit_coords {} {
        lassign [my get_box_coords] x1 y1 x2 y2
        return [list $x2 [expr {$y1 + ($y2 - $y1) / 2}]]
    }
    method serialise {f} {
        puts $f "\[State\]"
        puts $f "name=[my get_name]"
        puts $f "position=[my get_coords]"
    }
    method get_name {} {
        return $Name
    }
    method rename {new_name} {
        set Name $new_name
        [my get_canvas] dchars $Tid 0 end
        [my get_canvas] insert $Tid end $Name
        [my get_canvas] delete $Rid
        # can't find a way to resize the rectangle, so just recreate
        # it.  Renaming is in any case a rare operation, say compared
        # to moving the rectangle.
        set Rid [[my get_canvas] create rectangle [my get_box_coords] -fill lightgrey]
        [my get_canvas] lower $Rid $Tid
        my add_elements $Rid
        my emit redrawn
    }
    method on_selected {sender} {
        [my get_canvas] itemconfigure $Rid -fill blue
    }
    method on_deselected {sender} {
        [my get_canvas] itemconfigure $Rid -fill lightgrey
    }
    method on_popup_menu {} {
        create_popup_menu "$Name" \
            [list [list "Delete" "[self object] destroy_later"] \
                 [list "Rename" \
                      "create_rename_popup $Name [my get_parent] \
popup_rename_state [self object]"]]
    }
}



oo::class create transition {
    superclass notifier
    variable Canvas App Src Dst Event MidPoint MidElement Lid1 Lid2 Cid Tid
    constructor {canvas a src dst event args} {
        next
        set Canvas $canvas
        set App $a
        set Src $src
        set Dst $dst
        set Event $event
        if {$args == {}} {
            set MidPoint [my GetMidPointCoords]
        } else {
            set MidPoint {*}$args
        }
        set MidElement [basic_element new $canvas $a]
        set Tid [$Canvas create text [my GetTextCoords] -text $Event]
        set Cid [$Canvas create oval [my GetCircleCoords] -fill black -activefill red]
        set Lid1 [$Canvas create line [my GetLine1Coords] -smooth raw]
        set Lid2 [$Canvas create line [my GetLine2Coords] -arrow last -smooth raw]
        $Canvas lower $Lid1
        $Canvas lower $Lid2
        $Canvas raise $Cid $Lid1
        $Canvas raise $Cid $Lid2
        $Canvas raise $Cid $Tid
        $MidElement add_elements $Cid $Tid
        $Canvas addtag [self object] withtag $Lid1
        $Canvas addtag [self object] withtag $Lid2
        $MidElement connect redrawn [self object] redraw
        $MidElement connect popup_menu [self object] on_popup_menu

        [self object] connect destroyed $MidElement destroy_later
        $Src connect destroyed [self object] destroy_later
        $Src connect redrawn [self object] redraw
        if {$Src != $Dst} {
            $Dst connect redrawn [self object] redraw
            $Dst connect destroyed [self object] destroy_later
        }
    }
    destructor {
        next
        $Canvas delete [self object]
    }
    method serialise {f} {
        puts $f "\[Transition\]"
        puts $f "from=[$Src get_name]"
        puts $f "to=[$Dst get_name]"
        puts $f "points=$MidPoint"
        puts $f "event=$Event"
    }
    method rename {name} {
        set Event $name
        $Canvas dchars $Tid 0 end
        $Canvas insert $Tid end $Event
    }
    method redraw {args} {
        set MidPoint [calc_centre_coords [$Canvas bbox $Cid]]
        my RedrawLine
    }
    method get_name {} {
        return $Event
    }
    method on_popup_menu {} {
        create_popup_menu "$Event" \
            [list [list "Delete" "[self object] destroy_later"] \
                 [list "Rename" \
                      "create_rename_popup $Event [self object] rename"]]
    }
    method RedrawLine {} {
        $Canvas dchars $Lid1 0 end
        $Canvas dchars $Lid2 0 end
        $Canvas insert $Lid1 end [my GetLine1Coords]
        $Canvas insert $Lid2 end [my GetLine2Coords]
    }
    method GetCircleRadius {} {
        return 5
    }
    method GetBezierOffset {} {
        # looks ok
        return 100
    }
    method GetTextCoords {} {
        lassign $MidPoint x y
        set r [my GetCircleRadius]
        return [list $x [expr {$y + $r + 10}]]
    }
    method GetLineCoords {} {
        return [list {*}[$Src get_exit_coords] {*}[$Dst get_entry_coords]]
    }
    method GetLine1Coords {} {
        lassign [$Src get_exit_coords] exitx exity
        lassign $MidPoint mx my
        return [list $exitx $exity [expr {$exitx + [my GetBezierOffset]}] \
                    $exity $mx $my $mx $my]
    }
    method GetLine2Coords {} {
        lassign $MidPoint mx my
        lassign [$Dst get_entry_coords] entryx entryy
        set offset [my GetBezierOffset]
        return [list $mx $my $mx $my [expr {$entryx - [my GetBezierOffset]}] \
                    $entryy $entryx $entryy]
    }
    method GetMidPointCoords {} {
        lassign [my GetLineCoords] lsx lsy lex ley
        # special case for self transitions, shift down and to left
        if {$Src == $Dst} {
            return [list [expr {$lsx + ($lex - $lsx) / 2 - 70}] \
                        [expr {$lsy + ($ley - $lsy) / 2 + 50}]]
        }
        return [list [expr {$lsx + ($lex - $lsx) / 2}] \
                    [expr {$lsy + ($ley - $lsy) / 2}]]
    }
    method GetCircleCoords {} {
        lassign $MidPoint mx my
        set r [my GetCircleRadius]
        return [list [expr {$mx - $r}] [expr {$my - $r}] [expr {$mx + $r}] [expr {$my + $r}]]
    }
}



# A basic state on the canvas; behaves somewhat like a state
oo::class create initial_state {
    superclass basic_element
    variable Id
    constructor {c p x y} {
        set r 6
        set Id [$c create oval [calc_circle_bbox $x $y $r] \
                    -fill black -activefill red]
        next $c $p $Id
        [self object] connect selected [self object] on_selected
        [self object] connect deselected [self object] on_deselected
        [self object] connect popup_menu [self object] on_popup_menu
    }
    destructor {
        next
    }
    method get_exit_coords {} {
        lassign [my get_bbox] x1 y1 x2 y2
        return [list $x2 [expr {$y1 + ($y2 - $y1) / 2}]]
    }
    method serialise {f} {
        puts $f "\[Initial State\]"
        puts $f "position=[my get_coords]"
    }
    method get_name {} {
        return "InitialState"
    }
    method on_selected {sender} {
        [my get_canvas] itemconfigure $Id -fill blue
    }
    method on_deselected {sender} {
        [my get_canvas] itemconfigure $Id -fill black
    }
    method on_popup_menu {} {
        create_popup_menu "Initial State" \
            [list [list "Delete" "[self object] destroy_later"]]
    }
}


#### Setup canvas + widgets

my_app new .c
